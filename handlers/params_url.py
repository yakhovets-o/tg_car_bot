from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from aiogram_calendar import dialog_cal_callback, DialogCalendar
from keyboards import car_kb
from mysql_db import search_option_db


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã FSM
class FSM(StatesGroup):
    car = State()
    min_price = State()
    max_price = State()
    tracking_date = State()
    update_period_min = State()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ FSM
async def FSM_start(message: types.Message):
    await FSM.car.set()
    await message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ.', reply_markup=car_kb)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–∞—à–∏–Ω—ã FSM
async def car_cancel(message: types.Message, state: FSMContext):
    current_sate = await state.get_state()
    if current_sate is None:
        return
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    await state.finish()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥  –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ(–ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
async def car_message(massage: types.Message):
    await massage.answer(f'üî® –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n'
                         f'–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /break')
    await massage.delete()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—ã–±–æ—Ä –∞–≤—Ç–æ
async def car_choice(call: types.CallbackQuery, state: FSMContext):
    if call.data == '–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ':
        async with state.proxy() as data:
            data["cars"] = True
            data["truck_cars"] = False
    if call.data == '–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ':
        async with state.proxy() as data:
            data["cars"] = False
            data["truck_cars"] = True
    if call.data == '–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ / –ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ':
        async with state.proxy() as data:
            data["cars"] = True
            data["truck_cars"] = True
    cars = '–í—ã–±—Ä–∞–Ω–æ' if data["cars"] else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
    truck_cars = '–í—ã–±—Ä–∞–Ω–æ' if data["truck_cars"] else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
    await call.message.answer(f'–õ–µ–≥–∫–æ–≤–æ–µ –∞–≤—Ç–æ - {cars}\n–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ - {truck_cars}.')
    await call.message.edit_reply_markup()
    await FSM.next()
    await call.message.answer('üíµ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.')
    await call.answer()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∏–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async def car_price_start(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data["price_min"] = int(message.text)
            await FSM.next()
            await message.answer('üí∏ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å. ')

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        await message.delete()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–∫—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async def car_price_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() and int(data["price_min"]) > int(message.text):
            await message.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–≤—ã—à–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é.')
            await message.delete()
        if not message.text.isdigit():
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')
            await message.delete()
        if message.text.isdigit() and int(data['price_min']) <= int(message.text):
            data["price_max"] = int(message.text)
            await FSM.next()
            await message.answer('üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É  —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                                 reply_markup=await DialogCalendar().start_calendar())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥  –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ(–ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
async def car_publication(massage: types.Message):
    await massage.answer(f'üî® –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n'
                         f'–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /break')
    await massage.delete()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–∏–æ–¥–∞
async def car_tracking_date(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await DialogCalendar().process_selection(call, callback_data)
    if selected:
        async with state.proxy() as data:
            data["tracking_time"] = date.strftime('%Y-%m-%d %H:%M:%S')
            await call.answer()
            await call.message.answer(f'–î–∞—Ç–∞: {data["tracking_time"]}')
            await FSM.next()
            await call.message.answer('‚è∞ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥  –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è  –≤ –º–∏–Ω—É—Ç–∞—Ö')


async def update_period_min(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        await message.delete()
    else:
        async with state.proxy() as data:

            data["update_period_min"] = int(message.text)
            data["user_id"] = message.from_user.id
            cars = '–í—ã–±—Ä–∞–Ω–æ' if data["cars"] else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
            truck_cars = '–í—ã–±—Ä–∞–Ω–æ' if data["truck_cars"] else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
            await message.answer(f'–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n'
                                 f'–í—ã –≤—ã–±—Ä–∞–ª–∏:\n'
                                 f'–õ–µ–∫–≥–æ–≤–æ–µ –∞–≤—Ç–æ - üöó {cars}\n'
                                 f'–ì—Ä—É–∑–æ–≤–æ–µ –∞–≤—Ç–æ - üöö {truck_cars}\n'
                                 f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üíµ {data["price_min"]} usd\n'
                                 f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∏ {data["price_max"]} usd\n'
                                 f'–ü–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å üìÖ {data["tracking_time"]}\n'
                                 f'–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚è∞ {data["update_period_min"]} min\n\n'
                                 f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get \n\n'
                                 f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /begin'
                                 )

        await search_option_db.option_insert_table(state)
        await state.finish()


# —Ñ—É–Ω—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers
def register_handlers_params(dp: Dispatcher):
    dp.register_message_handler(FSM_start, commands='begin', state=None)
    dp.register_message_handler(car_cancel, state="*", commands='break')
    dp.register_message_handler(car_cancel, Text(equals='break', ignore_case=True), state="*")
    dp.register_message_handler(car_message, state=FSM.car)
    dp.register_callback_query_handler(car_choice, Text(endswith='–∞–≤—Ç–æ'), state=FSM.car)
    dp.register_message_handler(car_price_start, state=FSM.min_price)
    dp.register_message_handler(car_price_finish, state=FSM.max_price)
    dp.register_message_handler(car_publication, state=FSM.tracking_date)
    dp.register_callback_query_handler(car_tracking_date, dialog_cal_callback.filter(), state=FSM.tracking_date)
    dp.register_message_handler(update_period_min, state=FSM.update_period_min)
