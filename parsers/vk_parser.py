import re
import json
import time
import requests
from string import punctuation
from datetime import datetime
from mysql_db import vk_db
from create_bot import vk_token, vk_url, vk_count, vk_version_api, vk_groups

# —Ä–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ json
seller_id = re.compile(r'(?<=\[)id\d+(?=|)')
seller_price = re.compile(r'\d{,2}.?\d+(?= ?\$| ?—É\.?–µ| ?y\.?e)')
seller_text = re.compile(r'(\[id.+\])|(üì©.+\n.\n.+)')


# # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è json  –∏–∑ –≥—Ä—É–ø–ø
def get_json(user_id):
    for group in vk_groups.split(','):
        domain = group
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ url –∑–∞–ø—Ä–æ—Å–∞
        try:
            url_group = requests.get(url=vk_url, params={
                'domain': domain,
                'count': vk_count,
                'access_token': vk_token,
                'v': vk_version_api
            })
            # –∑–∞—Å—ã–ø–∞–µ–º –∏–±–æ api –Ω–µ –¥–∞–µ—Ç –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ 3 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫
            time.sleep(3)
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º json –≤ json —Ñ–∞–π–ª
            with open(fr'parsers/vk.ads/{user_id}_{group}.json', mode='w', encoding='utf-8') as file:
                json.dump(url_group.json(), file, indent=4, ensure_ascii=False)
        except Exception as ex:
            print(ex)


# —Ñ—É–Ω-—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è url –ø–æ—Å—Ç–∞
def link_post(group, post_from_id, post_id):
    return rf"https://vk.com/{group}?w=wall{post_from_id}_{post_id}"


# —Ñ—É–Ω-—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –µ–≥–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# –µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ —á–µ–º —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
# –∏–∑ json –ø–æ—Å—Ç—É–ø–∞–µ—Ç unix –≤—Ä–µ–º—è –µ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º  –ø–æ—è—Å–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_time(unix_time):
    unix_timestamp = int(unix_time)
    timee = datetime.fromtimestamp(unix_timestamp)
    user_time = datetime.strptime(timee.strftime('%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M:%S')
    return user_time


# —Ñ—É–Ω-—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã  –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –µ–≥–æ —Å —Å—É–º–º–æ–π , –∫–æ—Ç–æ—Ä—É—é  —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# –µ—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ  —á–µ–º —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
# –µ—Å–ª–∏ —Å—É–º–º—É –≤ –ø–æ—Å—Ç–µ  —Ä–µ–≥—É–ª—è—Ä–∫–∞ –Ω–µ –Ω–∞—à–ª–∞ —Å—É–º–º–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ä–æ–≤–Ω–∞ 0
def get_price(text_post):
    user_price = seller_price.findall(text_post)
    price = 0 if not user_price else int(float(str(user_price[0]).strip(punctuation).replace(' ', '')
                                               .encode('ascii', 'ignore')))
    return price


# —Ñ—É–Ω-—Ü–∏—è  –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
def get_link(post, group, text):
    # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞  auto_moto_minsk
    if group == 'auto_moto_minsk':
        user_id = seller_id.findall(text)
        link = rf"https://vk.com/id{post['signer_id']}" if 'signer_id' in post \
            else rf"https://vk.com/{str(*user_id)}"

        return link

    # # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞  –Ω–µ auto_moto_minsk,  –µ—Å–ª–∏  –∫–ª—é—á 'copyright'(—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç  –ò–∑–≤–Ω–µ) –Ω–µ—Ç
    if 'copyright' not in post and group != 'auto_moto_minsk':
        link = rf"https://vk.com/id{post['signer_id']}"
        return link

    # # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞  –Ω–µ auto_moto_minsk, –µ—Å–ª–∏  –∫–ª—é—á–∞ 'copyright' (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç  –ò–∑–≤–Ω–µ) –µ—Å—Ç—å
    if 'copyright' in post and group != 'auto_moto_minsk':
        link = post['copyright']['link']
        return link


# —Ñ—É–Ω-—Ü–∏–∏ get_link, get_bool_price, get_bool_time, link_post —è–≤–ª—è—é—Ç—Å—è –≤—Å–ø–æ–ª–æ–≥–∞—Ç–µ–ª—å–Ω—ã–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞  –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥—Ä—É–ø–ø
def get_post(user_id, tracing_data, price_max):
    for group in vk_groups.split(','):
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
        with open(fr'parsers/vk.ads/{user_id}_{group}.json', mode='r', encoding='utf-8') as file:
            group_posts = json.load(file)

            # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø—ã –≤ —Ü–∏–∫–ª–µ
            for post in group_posts['response']['items']:
                text = post['text']
                body = seller_text.split(text)[0]

                # –æ–±–µ—Ä–Ω—É–ª –≤ try except –∏–±–æ –µ—Å—Ç—å –ø–æ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –Ω–∞–º –∏—Ñ–Ω—ã(—Ä–µ–∫–ª–∞–º–∞)
                # —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ –¥–±(–∏–ª–∏ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
                try:
                    # –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞ –±–æ–ª—å—à–µ —á–µ–º —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å–ª–∏ —Å—É–º–º–∞ –≤ –ø–æ—Å—Ç–µ –º–µ–Ω—å—à–µ —á–µ–º —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    # –∏ –µ—Å–ª–∏ –∫–ª—é—á–∞  'is_pinned' (–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç) –Ω–µ—Ç
                    # –∏ –µ—Å–ª–∏ –∫–ª—é—á–∞ 'copy_history' (—Ä–µ–ø–æ—Å—Ç –≤ –ø–∞–±–ª–∏–∫) –Ω–µ—Ç
                    # –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if 'is_pinned' not in post and get_time(post['date']) > tracing_data and \
                            get_price(body) < price_max and 'copy_history' not in post:
                        all_params = (
                            user_id, link_post(group, post['from_id'], post['id']), get_link(post, group, text), body,
                            get_time(post['date']),
                        )

                        vk_db.vk_insert_table(all_params)
                except KeyError:
                    continue
